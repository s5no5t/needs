<p id="notice"><%= notice %></p>

<%= link_to image_tag("arrow_left_alt1_24x24.png"), requirements_path %>

<canvas id="viewport" width="400" height="400"></canvas>

<ul class="requirements_detailed_list" data-bind="foreach: requirement.deriving_requirements">
  <li data-bind="with: deriving_requirement, 
                css: {expanded: deriving_requirement.shouldDisplayBody} ">
    <span class="req_id" data-bind="text: id"></span>
    <span class="title" data-bind="text: title, 
                                   click: $root.toggleDerivingRequirementShouldDisplayBody"></span>
    <p data-bind="text: body, visible: shouldDisplayBody"></p>
  </li>
</ul>
<%= image_tag "arrow_up_32x32.png", :class => "centered" %>

<h1>
  <span class="req_id"><%= @requirement.id %></span>
  <span class="title"><%= @requirement.title %></span> 
</h1>

<p><%= @requirement.body %></p>

<%= link_to 'Edit', edit_requirement_path(@requirement) %>

<%= image_tag "arrow_down_32x32.png", :class => "centered" %>
<ul class="requirements_detailed_list" data-bind="foreach: requirement.derived_requirements">
  <li data-bind="with: derived_requirement,
                 css: {expanded: derived_requirement.shouldDisplayBody}">
    <span class="req_id" data-bind="text: id"></span>
    <span class="title" data-bind="text: title, 
                                   click: $root.toggleDerivedRequirementShouldDisplayBody"></span>
    <p data-bind="text: body, visible: shouldDisplayBody"></p>
  </li>
</ul>

<script type="text/javascript">
  $(function(){

    var canvas = $("#viewport").get(0);
    var requirementsGraph = needs.requirementsGraph(canvas);

    var requirement_id = <%= @requirement.id %>;

    $.getJSON("/requirements/" + requirement_id + ".json", function(data){
      var mapped_data = ko.mapping.fromJS(data);

      var requirementViewModel = function(){
        var that = {};

        that.requirement = mapped_data.requirement;

        that.toggleDerivingRequirementShouldDisplayBody = function(){
          this.shouldDisplayBody(!this.shouldDisplayBody());
        };

        that.toggleDerivedRequirementShouldDisplayBody = function(){
          this.shouldDisplayBody(!this.shouldDisplayBody());
        };

        that.remove_deriving_requirement = function(item, event){
          mapped_data.requirement.deriving_requirements.remove(function(r){
            return item.id() === r.deriving_requirement.id();
          });
        };

        that.remove_derived_requirement = function(item, event){
          mapped_data.requirement.derived_requirements.remove(function(r){
            return item.id() === r.derived_requirement.id();
          });
        };

        return that;
      };

      var viewModel = requirementViewModel();

      $(viewModel.requirement.deriving_requirements()).each(function(){
        $.extend(this.deriving_requirement, {
          shouldDisplayBody: ko.observable(false)
        });
      });
      $(viewModel.requirement.derived_requirements()).each(function(){
        $.extend(this.derived_requirement, {
          shouldDisplayBody: ko.observable(false)
        });
      });

      ko.applyBindings(viewModel);
      requirementsGraph.update_graph_for_req(viewModel.requirement);
    });

  });
</script>