<p id="notice"><%= notice %></p>

<%= link_to image_tag("arrow_left_alt1_24x24.png"), requirements_path %>

<canvas id="viewport" width="400" height="400"></canvas>

<h1><%= "#{@requirement.id} #{@requirement.title}" %></h1>

<style type="text/css">
  .page .content h1 {font-size: 120%; padding-top: 0.3em; padding-bottom: 0.3em; border-bottom: 1px solid #eee;}
    #viewport {float: right;}

    .requirement_detailed {background-color: #eee; padding-top: 0.3em; padding-bottom: 0.3em; width: 60%;}
    .requirement_detailed p {display: none;}

  img.centered {margin-left: auto; margin-right: auto; display: block; margin-top: 1em; margin-bottom: 1em;}
</style>

<ul data-bind="foreach: deriving_requirements">
  <li data-bind="with: deriving_requirement, click: $parent.toggleDerivingRequirementShouldDisplayBody" class="requirement_detailed">
    <%= render :partial => "req" %>
  </li>
</ul>
<%= image_tag "arrow_up_32x32.png", :class => "centered", :data => {:bind => "visible: any_deriving_requirements"} %>

<br/>

<p data-bind="text: body"></p>

<%= link_to 'Edit', edit_requirement_path(@requirement) %>

<%= image_tag "arrow_down_32x32.png", :class => "centered", :data => {:bind => "visible: any_derived_requirements"} %>
<ul data-bind="foreach: derived_requirements">
  <li data-bind="with: derived_requirement, click: $parent.toggleDerivedRequirementShouldDisplayBody" class="requirement_detailed">
    <%= render :partial => "req" %>
  </li>
</ul>

<script type="text/javascript">
  $(function(){

    var canvas = $("#viewport").get(0);
    var requirementsGraph = needs.requirementsGraph(canvas);

    var requirement_id = <%= @requirement.id %>; //TODO: this is not dynamic!

    $.getJSON("/requirements/" + requirement_id + ".json", function(data){
      var viewModel = {
        toggleDerivingRequirementShouldDisplayBody: function(){
          this.deriving_requirement.shouldDisplayBody(!this.deriving_requirement.shouldDisplayBody());
        },

        toggleDerivedRequirementShouldDisplayBody: function(){
          this.derived_requirement.shouldDisplayBody(!this.derived_requirement.shouldDisplayBody());
        },

        any_deriving_requirements: function(){
          return deriving_requirements.length > 0;
        },

        any_derived_requirements: function(){
          return derived_requirements.length > 0;
        }
      };
      $.extend(viewModel, data.requirement);
      $(viewModel.derived_requirements).each(function(){
        $.extend(this.derived_requirement, {
          shouldDisplayBody: ko.observable(false)
        });
      });
      $(viewModel.deriving_requirements).each(function(){
        $.extend(this.deriving_requirement, {
          shouldDisplayBody: ko.observable(false)
        });
      });

      ko.applyBindings(viewModel);
      requirementsGraph.update_graph_for_req(viewModel);
    });

  });
</script>